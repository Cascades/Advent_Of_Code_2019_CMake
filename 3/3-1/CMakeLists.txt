project(Advent_Of_Code_3-1)

cmake_minimum_required(VERSION 3.15)

set(ADVENT_OF_CODE_3_DIR ${CMAKE_CURRENT_LIST_DIR})

function(read_input_data)
        FILE(READ ${ADVENT_OF_CODE_3_DIR}/input_data.txt data_var)
        STRING(REGEX REPLACE "\n" ";" data_var ${data_var})
	list(GET data_var 0 line_0)
	list(GET data_var 1 line_1)
        STRING(REGEX REPLACE "," ";" line_0 ${line_0})
        STRING(REGEX REPLACE "," ";" line_1 ${line_1})
	set(line_0 ${line_0} PARENT_SCOPE)
        set(line_1 ${line_1} PARENT_SCOPE)
endfunction()

function(lines_from_raw line_raw_data output_data)
	set(current_x 0)
	set(current_y 0)
	set(output_lines "")
	foreach(instruction ${line_raw_data})
		string(SUBSTRING ${instruction} 0 1 direction)
		string(LENGTH ${instruction} string_len)
		math(EXPR magnitude_len "${string_len} - 1" OUTPUT_FORMAT DECIMAL)
		string(SUBSTRING ${instruction} 1 ${magnitude_len} magnitude)
		if(${direction} STREQUAL "U")
			math(EXPR new_y "${current_y} + ${magnitude}" OUTPUT_FORMAT DECIMAL)
			list(APPEND output_lines "${current_x}\\\\\;${current_y}\\\;${current_x}\\\\\;${new_y}\\\;V")
			set(current_y ${new_y})
		elseif(${direction} STREQUAL "D")
			math(EXPR new_y "${current_y} - ${magnitude}" OUTPUT_FORMAT DECIMAL)
                        list(APPEND output_lines "${current_x}\\\\\;${current_y}\\\;${current_x}\\\\\;${new_y}\\\;V")
			set(current_y ${new_y})
		elseif(${direction} STREQUAL "R")
			math(EXPR new_x "${current_x} + ${magnitude}" OUTPUT_FORMAT DECIMAL)
                        list(APPEND output_lines "${current_x}\\\\\;${current_y}\\\;${new_x}\\\\\;${current_y}\\\;H")
			set(current_x ${new_x})
		elseif(${direction} STREQUAL "L")
			math(EXPR new_x "${current_x} - ${magnitude}" OUTPUT_FORMAT DECIMAL)
                        list(APPEND output_lines "${current_x}\\\\\;${current_y}\\\;${new_x}\\\\\;${current_y}\\\;H")
			set(current_x ${new_x})
		else()
			message(FATAL_ERROR "BAD_DIRECTION")
		endif()
	endforeach()
	set(${output_data} ${output_lines} PARENT_SCOPE)
endfunction()

function(array_access array output_data)
	foreach(arg ${ARGN})
		list(GET array ${arg} array)
	endforeach()
	set(${output_data} ${array} PARENT_SCOPE)
endfunction()

function(find_min output_data)
	set(curr_min ${ARGV1})
	foreach(arg ${ARGN})
                if(${arg} LESS ${curr_min})
			set(curr_min ${arg})
		endif()
        endforeach()
        set(${output_data} ${curr_min} PARENT_SCOPE)
endfunction()

function(find_max output_data)
	set(curr_max ${ARGV1})
	foreach(arg ${ARGN})
                if(${arg} GREATER ${curr_max})
			set(curr_max ${arg})
		endif()
        endforeach()
        set(${output_data} ${curr_max} PARENT_SCOPE)
endfunction()

read_input_data()

lines_from_raw("${line_0}" lines_array_0)
lines_from_raw("${line_1}" lines_array_1)

foreach(line_0 ${lines_array_0})
	array_access("${line_0}" line_0_point_0_x 0 0)
	array_access("${line_0}" line_0_point_0_y 0 1)
	array_access("${line_0}" line_0_point_1_x 1 0)
	array_access("${line_0}" line_0_point_1_y 1 1)
	array_access("${line_0}" line_0_point_1_y 1 1)
	array_access("${line_0}" line_0_orientation 2)
#	message(STATUS "Line 0 has two points at (${line_0_point_0_x},${line_0_point_0_y}) and (${line_0_point_1_x},${line_0_point_1_y}) and orientation: ${line_0_orientation}")
	find_min(line_0_x_min ${line_0_point_0_x} ${line_0_point_1_x})
	find_min(line_0_y_min ${line_0_point_0_y} ${line_0_point_1_y})
	find_max(line_0_x_max ${line_0_point_0_x} ${line_0_point_1_x})
	find_max(line_0_y_max ${line_0_point_0_y} ${line_0_point_1_y})
	foreach(line_1 ${lines_array_1})
		array_access("${line_1}" line_1_point_0_x 0 0)
		array_access("${line_1}" line_1_point_0_y 0 1)
		array_access("${line_1}" line_1_point_1_x 1 0)
		array_access("${line_1}" line_1_point_1_y 1 1)
		array_access("${line_1}" line_1_orientation 2)
#		message(STATUS "Line 1 has two points at (${line_1_point_0_x},${line_1_point_0_y}) and (${line_1_point_1_x},${line_1_point_1_y}) and orientation: ${line_1_orientation}")
		find_min(line_1_x_min ${line_1_point_0_x} ${line_1_point_1_x})
		find_min(line_1_y_min ${line_1_point_0_y} ${line_1_point_1_y})
		find_max(line_1_x_max ${line_1_point_0_x} ${line_1_point_1_x})
		find_max(line_1_y_max ${line_1_point_0_y} ${line_1_point_1_y})
		if(${line_0_orientation} STREQUAL ${line_1_orientation})
			continue()
		endif()
		if(${line_0_orientation} STREQUAL "V")
			if(${line_0_point_0_x} GREATER_EQUAL ${line_1_x_min} AND ${line_0_point_0_x} LESS_EQUAL ${line_1_x_max})
				if(${line_1_point_0_y} GREATER_EQUAL ${line_0_y_min} AND ${line_1_point_0_y} LESS_EQUAL ${line_0_y_max})
					if(${line_0_point_0_x} EQUAL 0 AND  ${line_1_point_0_y} EQUAL 0)
						continue()
					endif()
					message(STATUS "INTERSECTION FOUND: (${line_0_point_0_x},${line_1_point_0_y})")
					if(${line_0_point_0_x} LESS 0)
						math(EXPR line_0_point_0_x "${line_0_point_0_x} * (-1)" OUTPUT_FORMAT DECIMAL)
					endif()
					if(${line_1_point_0_y} LESS 0)
						math(EXPR line_1_point_0_y "${line_1_point_0_y} * (-1)" OUTPUT_FORMAT DECIMAL)
					endif()
					math(EXPR distance "${line_0_point_0_x} + ${line_1_point_0_y}" OUTPUT_FORMAT DECIMAL)
					if(NOT closest_intersection)
						set(closest_intersection ${distance})
					else()
						if(${distance} LESS ${closest_intersection})
							set(closest_intersection ${distance})
						endif()
					endif()
				endif()
			endif()
		else()
			if(${line_1_point_0_x} GREATER_EQUAL ${line_0_x_min} AND ${line_1_point_0_x} LESS_EQUAL ${line_0_x_max})
				if(${line_0_point_0_y} GREATER_EQUAL ${line_1_y_min} AND ${line_0_point_0_y} LESS_EQUAL ${line_1_y_max})
					if(${line_1_point_0_x} EQUAL 0 AND  ${line_0_point_0_y} EQUAL 0)
						continue()
					endif()
					message(STATUS "INTERSECTION FOUND: (${line_1_point_0_x},${line_0_point_0_y})")
					if(${line_1_point_0_x} LESS 0)
						math(EXPR line_1_point_0_x "${line_1_point_0_x} * (-1)" OUTPUT_FORMAT DECIMAL)
					endif()
					if(${line_0_point_0_y} LESS 0)
						math(EXPR line_0_point_0_y "${line_0_point_0_y} * (-1)" OUTPUT_FORMAT DECIMAL)
					endif()
					math(EXPR distance "${line_1_point_0_x} + ${line_0_point_0_y}" OUTPUT_FORMAT DECIMAL)
					if(NOT closest_intersection)
						set(closest_intersection ${distance})
					else()
						if(${distance} LESS ${closest_intersection})
							set(closest_intersection ${distance})
						endif()
					endif()
                                endif()
                        endif()
		endif()
	endforeach()
endforeach()

message(STATUS "Closest intersections distance: ${closest_intersection}")



